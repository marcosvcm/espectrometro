import cv2
import matplotlib.pyplot as plt
import threading
import time


stream_url = "http://192.168.0.168:81/stream"
calculando = False
escrevendo = False
contagem = 0
medMov = []
spectre = []
'''vetLambdas =  [
	399.84000000000003, 400.23333333333335, 400.6266666666667, 401.02000000000004, 401.41333333333336, 401.8066666666667, 402.20000000000005, 402.59333333333336, 402.9866666666667, 403.38000000000005, 403.77333333333337, 404.1666666666667, 404.56000000000006, 404.9533333333334, 405.3466666666667, 405.74, 406.1333333333334, 406.5266666666667, 406.92, 407.3133333333334, 407.7066666666667, 408.1, 408.49333333333334, 408.8866666666667, 409.28000000000003, 409.67333333333335, 410.0666666666667, 410.46000000000004, 410.85333333333335, 411.24666666666667, 411.64000000000004, 412.03333333333336, 412.4266666666667, 412.82000000000005, 413.21333333333337, 413.6066666666667, 414.00000000000006, 414.3933333333334, 414.7866666666667, 415.18, 415.5733333333334, 415.9666666666667, 416.36, 416.7533333333334, 417.1466666666667, 417.54, 417.9333333333334, 418.3266666666667, 418.72, 419.11333333333334, 419.5066666666667, 419.90000000000003, 420.29333333333335, 420.6866666666667, 421.08000000000004, 421.47333333333336, 421.8666666666667, 422.26000000000005, 422.65333333333336, 423.0466666666667, 423.44000000000005, 423.83333333333337, 424.2266666666667, 424.62, 425.0133333333334, 425.4066666666667, 425.8, 426.1933333333334, 426.5866666666667, 426.98, 427.37333333333333, 427.7666666666667, 428.16, 428.55333333333334, 428.9466666666667, 429.34000000000003, 429.73333333333335, 430.1266666666667, 430.52000000000004, 430.91333333333336, 431.3066666666667, 431.70000000000005, 432.09333333333336, 432.4866666666667, 432.88000000000005, 433.27333333333337, 433.6666666666667, 434.06000000000006, 434.4533333333334, 434.8466666666667, 435.24, 435.6333333333334, 436.0266666666667, 436.42, 436.8133333333334, 437.2066666666667, 437.6, 437.99333333333334, 438.3866666666667, 438.78000000000003, 439.17333333333335, 439.5666666666667, 439.96000000000004, 440.35333333333335, 440.74666666666667, 441.14000000000004, 441.53333333333336, 441.9266666666667, 442.32000000000005, 442.71333333333337, 443.1066666666667, 443.5, 443.8933333333334, 444.2866666666667, 444.68, 445.0733333333334, 445.4666666666667, 445.86, 446.2533333333334, 446.6466666666667, 447.04, 447.4333333333334, 447.8266666666667, 448.22, 448.61333333333334, 449.0066666666667, 449.40000000000003, 449.79333333333335, 450.1866666666667, 450.58000000000004, 450.97333333333336, 451.3666666666667, 451.76000000000005, 452.15333333333336, 452.5466666666667, 452.94000000000005, 453.33333333333337, 453.7266666666667, 454.12, 454.5133333333334, 454.9066666666667, 455.3, 455.6933333333334, 456.0866666666667, 456.48, 456.87333333333333, 457.2666666666667, 457.66, 458.05333333333334, 458.4466666666667, 458.84000000000003, 459.23333333333335, 459.62666666666667, 460.02000000000004, 460.41333333333336, 460.8066666666667, 461.20000000000005, 461.59333333333336, 461.9866666666667, 462.38000000000005, 462.77333333333337, 463.1666666666667, 463.56000000000006, 463.9533333333334, 464.3466666666667, 464.74, 465.1333333333334, 465.5266666666667, 465.92, 466.3133333333334, 466.7066666666667, 467.1, 467.49333333333334, 467.8866666666667, 468.28000000000003, 468.67333333333335, 469.0666666666667, 469.46000000000004, 469.85333333333335, 470.24666666666667, 470.64000000000004, 471.03333333333336, 471.4266666666667, 471.82000000000005, 472.21333333333337, 472.6066666666667, 473.0, 473.3933333333334, 473.7866666666667, 474.18, 474.5733333333334, 474.9666666666667, 475.36, 475.75333333333333, 476.1466666666667, 476.54, 476.9333333333334, 477.3266666666667, 477.72, 478.11333333333334, 478.50666666666666, 478.90000000000003, 479.29333333333335, 479.6866666666667, 480.08000000000004, 480.47333333333336, 480.8666666666667, 481.26000000000005, 481.65333333333336, 482.0466666666667, 482.44000000000005, 482.83333333333337, 483.2266666666667, 483.62, 484.0133333333334, 484.4066666666667, 484.8, 485.1933333333334, 485.5866666666667, 485.98, 486.37333333333333, 486.7666666666667, 487.16, 487.55333333333334, 487.9466666666667, 488.34000000000003, 488.73333333333335, 489.12666666666667, 489.52000000000004, 489.91333333333336, 490.30666666666673, 490.70000000000005, 491.09333333333336, 491.4866666666667, 491.88, 492.27333333333337, 492.6666666666667, 493.06000000000006, 493.4533333333334, 493.8466666666667, 494.24, 494.6333333333333, 495.0266666666667, 495.42, 495.8133333333334, 496.2066666666667, 496.6, 496.99333333333334, 497.3866666666667, 497.78000000000003, 498.17333333333335, 498.5666666666667, 498.96000000000004, 499.35333333333335, 499.74666666666667, 500.14000000000004, 500.53333333333336, 500.9266666666667, 501.32000000000005, 501.71333333333337, 502.1066666666667, 502.5, 502.8933333333334, 503.2866666666667, 503.68, 504.0733333333334, 504.4666666666667, 504.86, 505.25333333333333, 505.6466666666667, 506.04, 506.4333333333334, 506.8266666666667, 507.22, 507.61333333333334, 508.00666666666666, 508.40000000000003, 508.79333333333335, 509.1866666666667, 509.58000000000004, 509.97333333333336, 510.3666666666667, 510.76, 511.15333333333336, 511.5466666666667, 511.94000000000005, 512.3333333333334, 512.7266666666667, 513.12, 513.5133333333333, 513.9066666666668, 514.3000000000001, 514.6933333333334, 515.0866666666667, 515.48, 515.8733333333333, 516.2666666666667, 516.6600000000001, 517.0533333333334, 517.4466666666667, 517.84, 518.2333333333333, 518.6266666666667, 519.02, 519.4133333333334, 519.8066666666667, 520.2, 520.5933333333334, 520.9866666666667, 521.38, 521.7733333333333, 522.1666666666667, 522.5600000000001, 522.9533333333334, 523.3466666666667, 523.74, 524.1333333333333, 524.5266666666666, 524.9200000000001, 525.3133333333334, 525.7066666666667, 526.1, 526.4933333333333, 526.8866666666667, 527.28, 527.6733333333334, 528.0666666666667, 528.46, 528.8533333333334, 529.2466666666667, 529.64, 530.0333333333333, 530.4266666666667, 530.82, 531.2133333333334, 531.6066666666667, 532.0, 532.3933333333333, 532.7866666666666, 533.1800000000001, 533.5733333333334, 533.9666666666667, 534.36, 534.7533333333333, 535.1466666666668, 535.54, 535.9333333333334, 536.3266666666667, 536.72, 537.1133333333333, 537.5066666666667, 537.9000000000001, 538.2933333333333, 538.6866666666667, 539.08, 539.4733333333334, 539.8666666666667, 540.26, 540.6533333333334, 541.0466666666666, 541.44, 541.8333333333334, 542.2266666666667, 542.62, 543.0133333333333, 543.4066666666668, 543.8, 544.1933333333334, 544.5866666666667, 544.98, 545.3733333333333, 545.7666666666667, 546.1600000000001, 546.5533333333334, 546.9466666666667, 547.34, 547.7333333333333, 548.1266666666667, 548.52, 548.9133333333334, 549.3066666666667, 549.7, 550.0933333333334, 550.4866666666667, 550.88, 551.2733333333333, 551.6666666666667, 552.0600000000001, 552.4533333333334, 552.8466666666667, 553.24, 553.6333333333333, 554.0266666666666, 554.4200000000001, 554.8133333333334, 555.2066666666667, 555.6, 555.9933333333333, 556.3866666666667, 556.78, 557.1733333333334, 557.5666666666667, 557.96, 558.3533333333334, 558.7466666666667, 559.14, 559.5333333333333, 559.9266666666667, 560.32, 560.7133333333334, 561.1066666666667, 561.5, 561.8933333333333, 562.2866666666666, 562.6800000000001, 563.0733333333334, 563.4666666666667, 563.86, 564.2533333333333, 564.6466666666668, 565.04, 565.4333333333334, 565.8266666666667, 566.22, 566.6133333333333, 567.0066666666667, 567.4000000000001, 567.7933333333333, 568.1866666666667, 568.58, 568.9733333333334, 569.3666666666667, 569.76, 570.1533333333334, 570.5466666666666, 570.94, 571.3333333333334, 571.7266666666667, 572.12, 572.5133333333333, 572.9066666666668, 573.3, 573.6933333333334, 574.0866666666667, 574.48, 574.8733333333333, 575.2666666666667, 575.6600000000001, 576.0533333333333, 576.4466666666667, 576.84, 577.2333333333333, 577.6266666666667, 578.02, 578.4133333333334, 578.8066666666667, 579.2, 579.5933333333334, 579.9866666666667, 580.38, 580.7733333333333, 581.1666666666667, 581.5600000000001, 581.9533333333334, 582.3466666666667, 582.74, 583.1333333333333, 583.5266666666666, 583.9200000000001, 584.3133333333334, 584.7066666666667, 585.1, 585.4933333333333, 585.8866666666667, 586.28, 586.6733333333334, 587.0666666666667, 587.46, 587.8533333333334, 588.2466666666667, 588.64, 589.0333333333333, 589.4266666666667, 589.82, 590.2133333333334, 590.6066666666667, 591.0, 591.3933333333333, 591.7866666666666, 592.1800000000001, 592.5733333333334, 592.9666666666667, 593.36, 593.7533333333333, 594.1466666666666, 594.54, 594.9333333333334, 595.3266666666667, 595.72, 596.1133333333333, 596.5066666666667, 596.9000000000001, 597.2933333333333, 597.6866666666667, 598.08, 598.4733333333334, 598.8666666666667, 599.26, 599.6533333333334, 600.0466666666666, 600.44, 600.8333333333334, 601.2266666666667, 601.62, 602.0133333333333, 602.4066666666668, 602.8, 603.1933333333334, 603.5866666666667, 603.98, 604.3733333333333, 604.7666666666667, 605.1600000000001, 605.5533333333333, 605.9466666666667, 606.34, 606.7333333333333, 607.1266666666667, 607.52, 607.9133333333334, 608.3066666666667, 608.7, 609.0933333333334, 609.4866666666667, 609.88, 610.2733333333333, 610.6666666666667, 611.0600000000001, 611.4533333333334, 611.8466666666667, 612.24, 612.6333333333333, 613.0266666666666, 613.4200000000001, 613.8133333333334, 614.2066666666667, 614.6, 614.9933333333333, 615.3866666666667, 615.78, 616.1733333333334, 616.5666666666667, 616.96, 617.3533333333334, 617.7466666666667, 618.14, 618.5333333333333, 618.9266666666667, 619.32, 619.7133333333334, 620.1066666666667, 620.5, 620.8933333333333, 621.2866666666666, 621.6800000000001, 622.0733333333334, 622.4666666666667, 622.86, 623.2533333333333, 623.6466666666666, 624.04, 624.4333333333334, 624.8266666666667, 625.22, 625.6133333333333, 626.0066666666667, 626.4000000000001, 626.7933333333333, 627.1866666666667, 627.58, 627.9733333333334, 628.3666666666667, 628.76, 629.1533333333334, 629.5466666666666, 629.94, 630.3333333333334, 630.7266666666667, 631.12, 631.5133333333333, 631.9066666666668, 632.3, 632.6933333333334, 633.0866666666667, 633.48, 633.8733333333333, 634.2666666666667, 634.6600000000001, 635.0533333333333, 635.4466666666667, 635.84, 636.2333333333333, 636.6266666666667, 637.02, 637.4133333333334, 637.8066666666666, 638.2, 638.5933333333334, 638.9866666666667, 639.38, 639.7733333333333, 640.1666666666667, 640.5600000000001, 640.9533333333334, 641.3466666666667, 641.74, 642.1333333333333, 642.5266666666666, 642.9200000000001, 643.3133333333334, 643.7066666666667, 644.1, 644.4933333333333, 644.8866666666667, 645.28, 645.6733333333334, 646.0666666666667, 646.46, 646.8533333333334, 647.2466666666667, 647.64, 648.0333333333333, 648.4266666666667, 648.82, 649.2133333333334, 649.6066666666667, 650.0, 650.3933333333333, 650.7866666666666, 651.1800000000001, 651.5733333333334, 651.9666666666667, 652.36, 652.7533333333333, 653.1466666666666, 653.54, 653.9333333333334, 654.3266666666667, 654.72, 655.1133333333333, 655.5066666666667, 655.9000000000001, 656.2933333333333, 656.6866666666667, 657.08, 657.4733333333334, 657.8666666666667, 658.26, 658.6533333333334, 659.0466666666666, 659.44, 659.8333333333334, 660.2266666666667, 660.62, 661.0133333333333, 661.4066666666668, 661.8, 662.1933333333334, 662.5866666666667, 662.98, 663.3733333333333, 663.7666666666667, 664.1600000000001, 664.5533333333333, 664.9466666666667, 665.34, 665.7333333333333, 666.1266666666667, 666.52, 666.9133333333334, 667.3066666666666, 667.7, 668.0933333333334, 668.4866666666667, 668.88, 669.2733333333333, 669.6666666666667, 670.06, 670.4533333333334, 670.8466666666667, 671.24, 671.6333333333333, 672.0266666666666, 672.4200000000001, 672.8133333333333, 673.2066666666667, 673.6, 673.9933333333333, 674.3866666666667, 674.78, 675.1733333333334, 675.5666666666666, 675.96, 676.3533333333334, 676.7466666666667, 677.1400000000001, 677.5333333333333, 677.9266666666667, 678.3199999999999, 678.7133333333334, 679.1066666666667, 679.5, 679.8933333333334, 680.2866666666666, 680.6800000000001, 681.0733333333333, 681.4666666666667, 681.86, 682.2533333333333, 682.6466666666668, 683.04, 683.4333333333334, 683.8266666666667, 684.22, 684.6133333333333, 685.0066666666667, 685.4000000000001, 685.7933333333333, 686.1866666666667, 686.58, 686.9733333333334, 687.3666666666667, 687.76, 688.1533333333334, 688.5466666666666, 688.94, 689.3333333333334, 689.7266666666667, 690.12, 690.5133333333333, 690.9066666666668, 691.3, 691.6933333333334, 692.0866666666667, 692.48, 692.8733333333333, 693.2666666666667, 693.6600000000001, 694.0533333333333, 694.4466666666667, 694.84, 695.2333333333333, 695.6266666666667, 696.02, 696.4133333333334, 696.8066666666666, 697.2, 697.5933333333334, 697.9866666666667, 698.38, 698.7733333333333, 699.1666666666667, 699.56, 699.9533333333334]
vetLambdas = [
	398.8285714285714, 400.51428571428573, 402.2, 403.8857142857143, 405.57142857142856, 407.25714285714287, 408.9428571428571, 410.62857142857143, 412.3142857142857, 414.0, 415.68571428571425, 417.37142857142857, 419.0571428571428, 420.74285714285713, 422.42857142857144, 424.1142857142857, 425.8, 427.48571428571427, 429.1714285714286, 430.85714285714283, 432.54285714285714, 434.2285714285714, 435.9142857142857, 437.6, 439.2857142857143, 440.9714285714286, 442.65714285714284, 444.34285714285716, 446.0285714285714, 447.7142857142857, 449.4, 451.0857142857143, 452.77142857142854, 454.45714285714286, 456.1428571428571, 457.8285714285714, 459.51428571428573, 461.2, 462.8857142857143, 464.57142857142856, 466.25714285714287, 467.9428571428571, 469.62857142857143, 471.3142857142857, 473.0, 474.6857142857143, 476.37142857142857, 478.0571428571428, 479.74285714285713, 481.42857142857144, 483.1142857142857, 484.8, 486.48571428571427, 488.1714285714286, 489.85714285714283, 491.54285714285714, 493.2285714285714, 494.9142857142857, 496.6, 498.2857142857143, 499.97142857142853, 501.65714285714284, 503.34285714285716, 505.0285714285714, 506.7142857142857, 508.4, 510.0857142857143, 511.7714285714286, 513.4571428571428, 515.1428571428571, 516.8285714285714, 518.5142857142857, 520.2, 521.8857142857142, 523.5714285714286, 525.2571428571429, 526.9428571428572, 528.6285714285714, 530.3142857142857, 532.0, 533.6857142857143, 535.3714285714286, 537.0571428571428, 538.7428571428571, 540.4285714285714, 542.1142857142856, 543.8, 545.4857142857143, 547.1714285714286, 548.8571428571429, 550.5428571428572, 552.2285714285714, 553.9142857142857, 555.6, 557.2857142857142, 558.9714285714285, 560.6571428571428, 562.3428571428572, 564.0285714285715, 565.7142857142858, 567.4, 569.0857142857143, 570.7714285714286, 572.4571428571428, 574.1428571428571, 575.8285714285714, 577.5142857142857, 579.2, 580.8857142857142, 582.5714285714286, 584.2571428571429, 585.9428571428572, 587.6285714285714, 589.3142857142857, 591.0, 592.6857142857143, 594.3714285714286, 596.0571428571428, 597.7428571428571, 599.4285714285714, 601.1142857142856, 602.8, 604.4857142857143, 606.1714285714286, 607.8571428571429, 609.5428571428572, 611.2285714285714, 612.9142857142857, 614.6, 616.2857142857142, 617.9714285714285, 619.6571428571428, 621.3428571428572, 623.0285714285715, 624.7142857142858, 626.4, 628.0857142857143, 629.7714285714286, 631.4571428571428, 633.1428571428571, 634.8285714285714, 636.5142857142857, 638.2, 639.8857142857142, 641.5714285714286, 643.2571428571429, 644.9428571428572, 646.6285714285714, 648.3142857142857, 650.0, 651.6857142857143, 653.3714285714286, 655.0571428571429, 656.7428571428571, 658.4285714285714, 660.1142857142856, 661.8, 663.4857142857143, 665.1714285714286, 666.8571428571429, 668.5428571428572, 670.2285714285714, 671.9142857142857, 673.6, 675.2857142857142, 676.9714285714285, 678.6571428571428, 680.3428571428572, 682.0285714285715, 683.7142857142858, 685.4, 687.0857142857143, 688.7714285714285, 690.4571428571428, 692.1428571428571, 693.8285714285714, 695.5142857142857, 697.2, 698.8857142857144]
'''
vetLambdas = [
	399.568345323741, 400.41726618705036, 401.26618705035975, 402.1151079136691, 402.96402877697847, 403.8129496402878, 404.66187050359713, 405.5107913669065, 406.35971223021585, 407.2086330935252, 408.05755395683457, 408.9064748201439, 409.75539568345323, 410.6043165467626, 411.45323741007195, 412.30215827338134, 413.15107913669067, 414.0, 414.8489208633094, 415.6978417266187, 416.5467625899281, 417.39568345323744, 418.24460431654677, 419.09352517985616, 419.9424460431655, 420.7913669064748, 421.6402877697842, 422.48920863309354, 423.33812949640287, 424.18705035971226, 425.0359712230216, 425.884892086331, 426.7338129496403, 427.58273381294964, 428.43165467625903, 429.28057553956836, 430.12949640287775, 430.9784172661871, 431.8273381294964, 432.6762589928058, 433.52517985611513, 434.37410071942446, 435.22302158273385, 436.0719424460432, 436.9208633093525, 437.7697841726619, 438.61870503597123, 439.4676258992806, 440.31654676258995, 441.1654676258993, 442.01438848920867, 442.863309352518, 443.7122302158274, 444.5611510791367, 445.41007194244605, 446.25899280575544, 447.10791366906477, 447.9568345323741, 448.8057553956835, 449.6546762589928, 450.50359712230215, 451.35251798561154, 452.2014388489209, 453.05035971223026, 453.8992805755396, 454.7482014388489, 455.5971223021583, 456.44604316546764, 457.29496402877703, 458.14388489208636, 458.9928057553957, 459.8417266187051, 460.6906474820144, 461.53956834532374, 462.38848920863313, 463.23741007194246, 464.0863309352518, 464.9352517985612, 465.7841726618705, 466.6330935251799, 467.48201438848923, 468.33093525179856, 469.17985611510795, 470.0287769784173, 470.8776978417267, 471.726618705036, 472.57553956834533, 473.42446043165467, 474.27338129496405, 475.12230215827344, 475.9712230215828, 476.8201438848921, 477.66906474820144, 478.5179856115108, 479.36690647482015, 480.21582733812954, 481.0647482014389, 481.9136690647482, 482.7625899280576, 483.6115107913669, 484.4604316546763, 485.30935251798564, 486.158273381295, 487.0071942446043, 487.8561151079137, 488.7050359712231, 489.5539568345324, 490.40287769784175, 491.2517985611511, 492.10071942446046, 492.9496402877698, 493.7985611510792, 494.6474820143885, 495.49640287769785, 496.34532374100723, 497.19424460431657, 498.04316546762595, 498.8920863309353, 499.7410071942446, 500.58992805755395, 501.43884892086334, 502.2877697841727, 503.13669064748206, 503.9856115107914, 504.8345323741007, 505.6834532374101, 506.53237410071944, 507.3812949640288, 508.23021582733816, 509.0791366906475, 509.9280575539569, 510.7769784172662, 511.6258992805756, 512.4748201438849, 513.3237410071943, 514.1726618705036, 515.0215827338129, 515.8705035971224, 516.7194244604317, 517.568345323741, 518.4172661870504, 519.2661870503598, 520.1151079136691, 520.9640287769785, 521.8129496402878, 522.6618705035971, 523.5107913669065, 524.3597122302158, 525.2086330935252, 526.0575539568346, 526.9064748201439, 527.7553956834532, 528.6043165467627, 529.453237410072, 530.3021582733813, 531.1510791366907, 532.0, 532.8489208633093, 533.6978417266187, 534.5467625899281, 535.3956834532374, 536.2446043165468, 537.0935251798562, 537.9424460431655, 538.7913669064749, 539.6402877697842, 540.4892086330935, 541.3381294964029, 542.1870503597122, 543.0359712230216, 543.884892086331, 544.7338129496403, 545.5827338129496, 546.4316546762591, 547.2805755395684, 548.1294964028777, 548.9784172661871, 549.8273381294964, 550.6762589928057, 551.5251798561151, 552.3741007194245, 553.2230215827338, 554.0719424460432, 554.9208633093525, 555.769784172662, 556.6187050359713, 557.4676258992806, 558.31654676259, 559.1654676258993, 560.0143884892086, 560.863309352518, 561.7122302158274, 562.5611510791367, 563.410071942446, 564.2589928057555, 565.1079136690648, 565.9568345323742, 566.8057553956835, 567.6546762589928, 568.5035971223022, 569.3525179856115, 570.2014388489209, 571.0503597122303, 571.8992805755396, 572.7482014388489, 573.5971223021584, 574.4460431654677, 575.294964028777, 576.1438848920864, 576.9928057553957, 577.841726618705, 578.6906474820144, 579.5395683453238, 580.3884892086331, 581.2374100719425, 582.0863309352518, 582.9352517985612, 583.7841726618706, 584.6330935251799, 585.4820143884892, 586.3309352517986, 587.1798561151079, 588.0287769784172, 588.8776978417267, 589.726618705036, 590.5755395683453, 591.4244604316548, 592.2733812949641, 593.1223021582734, 593.9712230215828, 594.8201438848921, 595.6690647482014, 596.5179856115108, 597.3669064748202, 598.2158273381295, 599.0647482014389, 599.9136690647482, 600.7625899280577, 601.611510791367, 602.4604316546763, 603.3093525179856, 604.158273381295, 605.0071942446043, 605.8561151079136, 606.7050359712231, 607.5539568345324, 608.4028776978417, 609.2517985611511, 610.1007194244605, 610.9496402877699, 611.7985611510792, 612.6474820143885, 613.4964028776978, 614.3453237410072, 615.1942446043165, 616.043165467626, 616.8920863309353, 617.7410071942446, 618.5899280575541, 619.4388489208634, 620.2877697841727, 621.136690647482, 621.9856115107914, 622.8345323741007, 623.68345323741, 624.5323741007195, 625.3812949640288, 626.2302158273382, 627.0791366906475, 627.9280575539569, 628.7769784172663, 629.6258992805756, 630.4748201438849, 631.3237410071943, 632.1726618705036, 633.0215827338129, 633.8705035971224, 634.7194244604317, 635.568345323741, 636.4172661870504, 637.2661870503598, 638.1151079136691, 638.9640287769785, 639.8129496402878, 640.6618705035971, 641.5107913669065, 642.3597122302158, 643.2086330935252, 644.0575539568346, 644.9064748201439, 645.7553956834533, 646.6043165467627, 647.453237410072, 648.3021582733813, 649.1510791366907, 650.0, 650.8489208633093, 651.6978417266188, 652.5467625899281, 653.3956834532374, 654.2446043165468, 655.0935251798562, 655.9424460431655, 656.7913669064749, 657.6402877697842, 658.4892086330935, 659.3381294964029, 660.1870503597122, 661.0359712230216, 661.884892086331, 662.7338129496403, 663.5827338129498, 664.4316546762591, 665.2805755395684, 666.1294964028777, 666.9784172661871, 667.8273381294964, 668.6762589928057, 669.5251798561151, 670.3741007194245, 671.2230215827338, 672.0719424460432, 672.9208633093526, 673.769784172662, 674.6187050359713, 675.4676258992806, 676.31654676259, 677.1654676258993, 678.0143884892086, 678.863309352518, 679.7122302158274, 680.5611510791367, 681.410071942446, 682.2589928057555, 683.1079136690648, 683.9568345323742, 684.8057553956835, 685.6546762589928, 686.5035971223022, 687.3525179856115, 688.2014388489209, 689.0503597122303, 689.8992805755396, 690.748201438849, 691.5971223021584, 692.4460431654677, 693.294964028777, 694.1438848920864, 694.9928057553957, 695.841726618705, 696.6906474820144, 697.5395683453238, 698.3884892086331, 699.2374100719425
]

def calcSpectre(red, green, blue):
	return (red + green/2 + blue)/3


def normalizarVet(vet):
	max = 0
	for i in vet:
		if i > max: max = i
	res = [x/max for x in vet]
	return res


def corrigirVet(vet, corretor):
	res = []
	for i in range(len(corretor)):
		res.append(vet[i]*corretor[i])
	return res


def streamVideo(streamUrl, espessura, vezes, posc, pixIni, pixFin, vetCorretor):
	global calculando
	tentarNovamente = False
	cap = cv2.VideoCapture(streamUrl)
	
	while(True):
		ret, frame = cap.read()
		if not ret:
			print("Error reading frame from stream")
			tentarNovamente = True
			break
		else:
			# Process RGB values
			if not calculando:
				calculando = True
				t1 = threading.Thread(target=processLinGlobal, args=(frame, espessura, vezes, posc, pixIni, pixFin, vetCorretor))
				t1.start()
				#print("foooooooooooooo")

			cv2.imshow("ESP32-CAM Stream", frame)

			if cv2.waitKey(1) & 0xFF == ord('q'):
				break

	cap.release()
	cv2.destroyAllWindows()

	if tentarNovamente: streamVideo(streamUrl, espessura, vezes, posc, pixIni, pixFin, vetCorretor)


def streamGraf(streamUrl, espessura, vezes, posc, pixIni, pixFin, vetCorretor):
	global calculando
	tentarNovamente = False
	cap = cv2.VideoCapture(streamUrl)

	while(True):
		ret, frame = cap.read()
		if not ret:
			print("Error reading frame from stream")
			tentarNovamente = True
			break
		else:
			# Process RGB values
			if not calculando:
				calculando = True
				t1 = threading.Thread(target=processLinGlobal, args=(frame, espessura, vezes, posc, pixIni, pixFin, vetCorretor, ))
				t1.start()
				#print("foooooooooooooo")

	cap.release()
	cv2.destroyAllWindows()

	if tentarNovamente: streamGraf(streamUrl, espessura, vezes, posc, pixIni, pixFin, vetCorretor)


def processLin(frame): 
	res = []
	height, width, _ = frame.shape
	center_row = height // 2

	linha = frame[center_row]
	for pixel in linha:
		r, g, b = pixel
		res.append(calcSpectre(int(r), int(g), int(b)))
	return normalizarVet(res)


def processLinGlobal(frame, espessura, vezes, posc, pixIni, pixFin, vetCorretor): 
	global escrevendo
	global calculando
	global spectre
	global contagem
	global medMov

	if contagem >= vezes: contagem = 0
	if espessura < 1: espessura = 1
	if vezes < 1: vezes = 1
	res = []
	posLinha = posc

	comeco = pixIni if pixIni < pixFin else pixFin
	fim = pixFin if pixIni < pixFin else pixIni
	linha = frame[posLinha]
	for pixel in linha[comeco : fim]:
		r, g, b = pixel
		res.append(calcSpectre(int(r), int(g), int(b)))
	for i in range(1, espessura // 2):
		n = 0
		linha = frame[posLinha - i]
		for pixel in linha[comeco : fim]:
			r, g, b = pixel
			res[n] += calcSpectre(int(r), int(g), int(b))
			n += 1
		n = 0
		linha = frame[posLinha + i]
		for pixel in linha[comeco : fim]:
			r, g, b = pixel
			res[n] = calcSpectre(int(r), int(g), int(b))
			n += 1

	try:
		medMov[contagem] = res
	except:
		medMov.append(res)

	contagem += 1

	res = medMov[0]
	for i in range(len(res)):
		try:
			for j in range(1, len(medMov)):
				res[i] += medMov[j][i] 
		except:
			break

	div = len(medMov)
	for i in range(len(res)):
		res[i] = res[i]/div

	if not escrevendo:
		escrevendo = True
		spectre = corrigirVet(res, vetCorretor)
		spectre = normalizarVet(spectre)
		escrevendo = False
	calculando = False


def plotSpectreGlobal():
	global escrevendo
	global spectre
	global vetLambdas
	plt.ion()
	plt.figure(figsize=(8, 6))
	while True:
		if not escrevendo:
			escrevendo = True
			val = spectre
			escrevendo = False
			plt.clf() 
			try:
				plt.plot(vetLambdas, val, color='Red', label='espectro',)
			except:
				plt.plot(val, color='Red', label='espectro',)
			plt.legend()
			plt.xlabel('pixel')
			plt.ylabel('intensidade')
			plt.title('intensidade x pixel')
			plt.grid(True)
			plt.pause(1/10)


def plotSpectreGlobal1Time():
	global escrevendo
	global spectre
	global vetLambdas
	while (escrevendo):
		pass
	escrevendo = True
	val = spectre
	escrevendo = False
	plt.plot(vetLambdas, val, color='Red', label='espectro',)
	plt.legend()
	plt.xlabel('pixel')
	plt.ylabel('intensidade')
	plt.title('intensidade x pixel')
	plt.grid(True)
	plt.show()

		
def plotSpectre(vet, ax):
	ax.clear()  # Clear the previous plot
	ax.plot(vet, color='blue', label='espectro',)
	ax.set_xlabel('Pixel Position')
	ax.set_ylabel('normalized intensity')
	ax.set_title('Spectre intensity x pixel')
	ax.legend()
	ax.grid(True)


def processFrame(frame, ax):
	global calculando
	vet = processLin(frame)
	plotSpectre(vet, ax)
	calculando = False


def grafMedia(streamUrl, espessura, vezes, posc, pixIni, pixFin, vetCorretor):
	global calculando
	tentarNovamente = False
	cap = cv2.VideoCapture(streamUrl)

	for x in range(vezes):
		ret, frame = cap.read()
		if not ret:
			print("Error reading frame from stream")
			tentarNovamente = True
			break
		else:
			# Process RGB values
			if not calculando:
				calculando = True
				t1 = threading.Thread(target=processLinGlobal, args=(frame, espessura, vezes, posc, pixIni, pixFin, vetCorretor, ))
				t1.start()
				#print("foooooooooooooo")

	cap.release()
	cv2.destroyAllWindows()
	if tentarNovamente: grafMedia(streamUrl, espessura, vezes, posc, pixIni, pixFin, vetCorretor)
	
	plotSpectreGlobal1Time()


def streamFoto(streamUrl, espessura, vezes, posc, pixIni, pixFin, vetCorretor):
	global calculando
	tentarNovamente = False
	cap = cv2.VideoCapture(streamUrl)
	
	while(True):
		ret, frame = cap.read()
		if not ret:
			print("Error reading frame from stream")
			tentarNovamente = True
			break
		else:
			# Process RGB values
			if not calculando:
				calculando = True
				t1 = threading.Thread(target=processLinGlobal, args=(frame, espessura, vezes, posc, pixIni, pixFin, vetCorretor))
				t1.start()
				print("badabing")

			# Display the frame
			cv2.imshow("ESP32-CAM Stream", frame)

			break

	while (True):
		if cv2.waitKey(1) & 0xFF == ord('q'):
			cap.release()
			cv2.destroyAllWindows()
			break

	if tentarNovamente: streamFoto(streamUrl, espessura, vezes, posc, pixIni, pixFin, vetCorretor)


if __name__ == "__main__":
	operação = 0 # 0=liveVideo; 1=live; 2=media1time
	espessura = 10
	sensibilidade = 50
	vezes = 50
	# VAL PARA CALIBRACAO
	posicao = 591
	pixelIni = 669
	pixelFin = 1023
	vetCorretor = [
		-3.6729407402325648e-06, -2.1655467404097073e-06, -1.6830938446582068e-06, -1.9794851842870975e-06, -1.979419746935895e-06, -1.6600934008173167e-06, -1.1701820499126746e-06, -8.289618190321939e-07, -1.090811939912843e-06, -3.999036945318254e-07, 7.183343906030395e-07, 6.481158687446734e-07, 1.7280161160036448e-06, 3.4729638636942044e-06, 3.834738610258354e-06, 4.34243471734871e-06, 6.216452853345922e-06, 7.9573822334196e-06, 9.927786463207897e-06, 1.0973122551460292e-05, 1.4082268861925579e-05, 1.5750718838265357e-05, 1.9190393666927308e-05, 2.101486450005379e-05, 2.5296345247671455e-05, 2.6540849705124014e-05, 3.2460377555850907e-05, 3.2391857840694776e-05, 3.913663967892001e-05, 4.1536401356447944e-05, 4.812843307715158e-05, 5.1357996313144e-05, 5.8107812884874685e-05, 6.640245861891667e-05, 7.392265434865627e-05, 8.614671742297653e-05, 9.621858341052577e-05, 0.00011080905984170291, 0.00012033373628234289, 0.00013811102568903256, 0.00015249331231054352, 0.00017044962983391544, 0.00018213262466032937, 0.00020188263202566912, 0.00021819687202655154, 0.0002394653767431576, 0.00026046132166451303, 0.00028588609108298616, 0.0003068977873318708, 0.000340050986757594, 0.0003687562219751722, 0.0004143040470155455, 0.0004539167873716102, 0.0005017414381898303, 0.0005382062243329612, 0.0005911260015221503, 0.0006249626575912336, 0.0006696946422462187, 0.0006991610343564545, 0.0007209357830105365, 0.000725106857128499, 0.0007323415569535377, 0.0006998060858720037, 0.0006785352165610562, 0.0006285545095627638, 0.0005806076074415786, 0.0005174935637415847, 0.0004839173534497602, 0.00042561652555429754, 0.0003827428468887518, 0.0003474293584650404, 0.00032369418404463437, 0.0002941821276070976, 0.00027452931309465304, 0.0002639622968414452, 0.0002542171010366847, 0.0002454075366169499, 0.0002384343856938111, 0.00023352500004965624, 0.00022893330048355407, 0.0002214219027934905, 0.00021488832261554246, 0.000205841732538235, 0.00020230616813059308, 0.00019149684572461128, 0.00018238777160695753, 0.00017586404149553487, 0.00016598597380050522, 0.00015851531096072174, 0.00014835299333414517, 0.0001412437046677925, 0.00013598112986617998, 0.00013014473876752646, 0.0001263904222214691, 0.0001249437634966683, 0.00012212856113961404, 0.00012206183875131082, 0.00012150135601851999, 0.00011993785310620304, 0.00011865197260490053, 0.00011717558363639165, 0.00011708591154431122, 0.00011698247797711092, 0.00011629359662378433, 0.00011562407810538754, 0.00011716099538112587, 0.00011869423060824836, 0.00011960155875078325, 0.00012343017738580426, 0.0001280346768394004, 0.00013102849853741962, 0.00014141678199766313, 0.00014569073024060228, 0.00015464113235699183, 0.00016268615906554716, 0.00017951637840567353, 0.0001879097653813106, 0.00019800364115221678, 0.00020290711856990213, 0.00021842565489547103, 0.00022295123642736842, 0.00024074647185447952, 0.00024835165916126795, 0.00026392974709955376, 0.0002704311438458605, 0.00029165271696993274, 0.00029660550213128503, 0.00031375679159102265, 0.0003230101858761664, 0.0003376265729631949, 0.00035060618309817025, 0.0003549130192033725, 0.00036735388793234273, 0.00038144226640799474, 0.00039629648275561015, 0.0004094337560166191, 0.0004178701546104559, 0.00043011385207177873, 0.0004417742859152313, 0.00044721854791880737, 0.00045684983583914866, 0.00046385689097582877, 0.0004702244260145825, 0.0004712991242780365, 0.00047966536630500087, 0.00048110692308435773, 0.00048544464462426995, 0.00046011398957197537, 0.00046453567075753873, 0.00046437975555345287, 0.0004650307887253046, 0.00045954505585661036, 0.0004636120519898205, 0.00045086111915081117, 0.0004559972471901853, 0.0004465403488516773, 0.0004464971471044278, 0.00044183709809551944, 0.00044360245925003153, 0.00043480600832492905, 0.0004400483266522637, 0.0004362768890292356, 0.00043853295561858404, 0.0004306211906521708, 0.000431166745192372, 0.000432590528071113, 0.0004337088882276051, 0.00043372847919743117, 0.0004341469201563408, 0.00044020499580626544, 0.00043686543395493046, 0.0004409019444380825, 0.000441905876602109, 0.0004454374835271317, 0.00044532215112818365, 0.0004496049822532148, 0.0004482586064250315, 0.00045394392912999126, 0.00045429514373687924, 0.0004769003664740566, 0.0004756379809374679, 0.00048442386190315, 0.0004837638675406195, 0.0004945888520076394, 0.0004960353337489247, 0.0005092393489391575, 0.0005064569706778271, 0.0005242502972274113, 0.0005247456706722471, 0.0005332220155140124, 0.000529452491732609, 0.000541860446754622, 0.0005374898887012765, 0.0005386839642721069, 0.0005389075287918671, 0.0005568953264270119, 0.0005559875623472169, 0.0005426268652516454, 0.0005402644522881457, 0.0005344751387344961, 0.0005286027390445827, 0.0005137151345781983, 0.0005126826026580851, 0.0005047854454552184, 0.0004977209600627338, 0.000480983283562613, 0.0004765542753708603, 0.00046719936654166704, 0.0004649231831250004, 0.000459254055812297, 0.0004558580265686079, 0.0004489166450864179, 0.0004424544000682456, 0.00043621523635861275, 0.0004345966967462084, 0.0004341977579416609, 0.00043112270243933856, 0.00042611859370685886, 0.0004202135926512356, 0.00041779376392787833, 0.000417006911585514, 0.00041373348955823407, 0.000410978868216885, 0.00040746440642734324, 0.00040546397166615157, 0.00040695948554479597, 0.0004070372190346053, 0.00038998955923327995, 0.0003890251088127528, 0.00038741964252271733, 0.0003906278467063095, 0.00039043926847828704, 0.0003917158685344424, 0.0003869591341381912, 0.00038419972411768037, 0.00038398227060449687, 0.0003820336994632394, 0.0003758278923860217, 0.0003735999743622119, 0.00037087332531351666, 0.0003669198207781746, 0.0003591127734978176, 0.00035609177131133837, 0.00035542861274267336, 0.00035173876118796914, 0.0003482236286810577, 0.00034368147717554835, 0.0003397292612638005, 0.0003363610215686221, 0.00033321623880054087, 0.00032955371748459957, 0.00033116091527215325, 0.0003267680845419545, 0.0003230533045501322, 0.00031936061858780953, 0.0003140688380514187, 0.00031184296028798623, 0.0003082158142353226, 0.00030482139901699055, 0.0002983280130172875, 0.00029405403609445997, 0.0002884797493534456, 0.00028392992019725003, 0.0002753785790168164, 0.0002722352785047541, 0.00026539719155455066, 0.0002593776506419646, 0.0002543253394362063, 0.00024922445712785725, 0.00024325588887616666, 0.00023939392673268562, 0.0002339487703780893, 0.0002301549092451904, 0.0002258229624942694, 0.0002207586731219305, 0.00021079260556987664, 0.0002067976351798265, 0.00020281826528262796, 0.00019872896660895625, 0.0001935892421927181, 0.00019083484683833632, 0.00018345429597957136, 0.00017801927198677616, 0.0001737518082990054, 0.00016940334392441956, 0.00016469204852786364, 0.00016369350809810427, 0.00016403287811472779, 0.00016246014199726203, 0.00016234413548510678, 0.00016020937126250717, 0.00016072723858146244, 0.0001581700149204313, 0.00015774328134177787, 0.0001576274025063188, 0.0001577981792148501, 0.0001584574922587446, 0.0001577761803679904, 0.00015556077006783058, 0.0001637673544867228, 0.0001610619768401437, 0.0001631862365427254, 0.00016534559519345478, 0.00017091678548472803, 0.00017381865639471049, 0.0001769064992371334, 0.00017499714479656287, 0.00019496942535049712, 0.00019252639685346515, 0.00019558697959164983, 0.00019879616912317217, 0.00020763353669280506, 0.00021186852146428488, 0.0002171760799933931, 0.0002153631026004212, 0.00023101143110151203, 0.00022509934462031767, 0.00022300392613708528, 0.0002228553596305181, 0.00022242223880460487, 0.0002220403958435788, 0.00021957363382921042, 0.0002112742356334189, 0.0002268287696591971, 0.00021733715236506366, 0.00020800865180073993, 0.00020386699976216753, 0.00019844366247967824, 0.00019114968968628166, 0.00019077606006569225, 0.00018353015280599827, 0.0001916397204920174, 0.00018259948076544948, 0.00018081679348411404, 0.0001741745681941064, 0.00017081835497715608, 0.00016707669131219176, 0.00015893247539563342, 0.000153535155339022, 0.0001607621958235425, 0.00015492782775306993, 0.00015008869866333323, 0.00014471566819125185, 0.0001413394877735376, 0.00013518082756471816, 0.00013421554387236156, 0.00013039452648849515, 0.00013165781295359586, 0.00012567196137062256, 0.00011839192107008653, 0.00011770926871077476, 0.00011193017887507284, 0.00010758443671660821, 0.00010393781218326296
	]
	print(len(vetCorretor),len(vetCorretor))


	while True:
		operação = input("Qual operação?\n(1)video\n(2)live graf\n(3)1 vez\n(4)foto\n(q)sair\n-->")
		if operação == '1':
			t0 = threading.Thread(target=streamVideo, args=(stream_url, espessura, vezes, posicao, pixelIni, pixelFin, vetCorretor, ))
			t0.start()
			plotSpectreGlobal()
		elif operação == '2':
			t0 = threading.Thread(target=streamGraf, args=(stream_url, espessura, vezes, posicao, pixelIni, pixelFin, vetCorretor, ))
			t0.start()
			plotSpectreGlobal()
		elif operação == "3":
			grafMedia(stream_url, espessura, vezes, posicao, pixelIni, pixelFin, vetCorretor)
		elif operação == '4':
				t0 = threading.Thread(target=streamFoto, args=(stream_url, espessura, vezes, posicao, pixelIni, pixelFin, vetCorretor, ))
				t0.start()
				time.sleep(1)
				plotSpectreGlobal1Time()
		elif operação == 'q':
			print("tchau")
			break
		else:
			print("erro")


